---
import { CreateMissingPageSection } from '@client/SiteApp/CreateMissingPageSection';
import { PageFabs } from '@client/sites/PageApp/PageFabs';
import { createPage, parsePage } from '@schemas/PageSchema';
import type { Site } from '@schemas/SiteSchema';
import { toClientEntry } from '@utils/client/entryUtils';
import { logDebug } from '@utils/logHelpers';
import PageArticleFooter from './PageArticleFooter.astro';
import PageArticleHeader from './PageArticleHeader.astro';
import PageSidebar from './PageSidebar.astro';

/** SSR Site app */

interface Props {
  pageKey: string;
  site: Site;
}
const { site, pageKey } = Astro.props as Props;
const origin = new URL(Astro.request.url).origin;

// Fetch page data from the api
const pageResponse = await fetch(
  `${origin}/api/sites/${site.key}/pages/${pageKey}.json`,
);

const exists = pageResponse.status !== 404;
const page = exists
  ? parsePage(toClientEntry(await pageResponse.json()), pageKey, site.key)
  : createPage(pageKey, site.key);

logDebug('PageApp', page.htmlContent);
---
<div class="content-columns">
  { exists ? <article class="column-l elevation-1 p-2">
    <PageArticleHeader page={page} site={site}/>
    <div set:html={page.htmlContent}></div>
    <PageArticleFooter page={page} site={site}/>
  </article> :
  <article class="column-l elevation-1 p-2">
    <div class="flex">
        <cn-icon noun="monsters" xlarge />
        <h1>404</h1>
      </div>
      
      <CreateMissingPageSection site={site} pageKey={pageKey} client:only="solid-js"/>

  </article>}
  <PageSidebar site={site} />
  <PageFabs pageKey={pageKey} site={site} client:only="solid-js"/>
</div>