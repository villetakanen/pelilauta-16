---
import { type Site, parseSite } from '@schemas/SiteSchema';
import { toClientEntry } from '@utils/client/entryUtils';
import { toDisplayString } from '@utils/contentHelpers';
import { t } from '@utils/i18n';
import { logError } from '@utils/logHelpers';
import { systemToNoun } from '@utils/schemaHelpers';

interface Props {
  uid: string;
}

const { uid } = Astro.params;
const origin = new URL(Astro.request.url).origin;
const siteListRequest = await fetch(`${origin}/api/sites?uid=${uid}`);

const sites = new Array<Site>();

try {
  if (siteListRequest.status === 200) {
    const siteListResponse = await siteListRequest.json();
    for (const site of siteListResponse) {
      sites.push(parseSite(toClientEntry(site), site.key));
    }
  }
} catch (error) {
  logError('ProfileSiteList failed to fetch the users public sites', error);
}
---
<article>
  <h2>{t('profile:siteList.title')}</h2>
  { sites.length > 0 ? (
    <ul class="list-type-none m-0 p-0">
      {sites.map((site) => (
        <li class="m-0 p-0">
          <a href={`/sites/${site.key}`}
            class="flex hoverable align-center px-1 flex-no-wrap">
            <cn-icon noun={systemToNoun(site.system)} />
            <h4 class="downscaled m-0 grow">
              {site.name}
            </h4>
            <p>
              {toDisplayString(site.flowTime)}
            </p>
          </a>
        </li>
      ))}
    </ul>
    ) : (
        <p>{t('profile:siteList.empty')}</p>
    )}
</article>