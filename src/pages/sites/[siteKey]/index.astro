---
import { PageSchema } from '@schemas/PageSchema';
import { SiteSchema } from '@schemas/SiteSchema';
import PageApp from '@server/SiteApp/PageApp.astro';
import SiteTray from '@server/SiteApp/SiteTray.astro';
import BackgroundPoster from '@server/ui/BackgroundPoster.astro';
import PageFabs from '@svelte/sites/PageFabs.svelte';
import { logError } from '@utils/logHelpers';
import { systemToNoun } from '@utils/schemaHelpers';
import PageWithTray from 'src/layouts/PageWithTray.astro';

const { siteKey: siteKeyParam } = Astro.params;
const siteKey = siteKeyParam || 'mekanismi'; // This should not happen, but just in case

// Fetch site data from the API first, so we can use it to figure out the
// home page key, which can be set to a different value than the site key.
const siteResponse = await fetch(`${Astro.url.origin}/api/sites/${siteKey}`);
if (!siteResponse.ok) {
  // If the site is not found, redirect to the 404 page
  return Astro.redirect('/404');
}
// Site data comes from the API - so we can expect it to be
// in the correct format for the client apps.
const site = SiteSchema.parse(await siteResponse.json());

// Figure out the home page key. If the site has a homepage set, use that.
// Otherwise, we can expect the home page key to be the same as the site key.
const homePageKey = site.homepage || site.key;

// Fetch page data from the API
const pageResponse = await fetch(
  `${Astro.url.origin}/api/sites/${siteKey}/pages/${homePageKey}`,
);

if (!pageResponse.ok) {
  // If the page is not found, redirect to the 404 page. This should not happen, so we also
  // log an error.
  logError(
    `Page ${homePageKey} not found for site ${siteKey}. Redirecting to 404. This is likely caused by an error in the site configuration.`,
    { siteKey, homePageKey },
  );
  return Astro.redirect('/404');
}
// Page data comes from the API - so we can expect it to be
// in the correct format for the client apps.
const page = PageSchema.parse(await pageResponse.json());

// Create local helpers for component props
const noun = systemToNoun(site.system);
const image = site.avatarURL || site.posterURL || site.backgroundURL;
---
<PageWithTray
  title={site.name}
  noun={noun}
  description={site.description}
  image={image}>
  <SiteTray slot="app-tray" site={site}/>
  <PageApp site={site} page={page} />
  <PageFabs pageKey={homePageKey} site={site} client:only="svelte" slot="fab-tray" />
  { site.backgroundURL && 
    <BackgroundPoster src={site.backgroundURL} slot="app-background-poster"/>
  }
</PageWithTray>
