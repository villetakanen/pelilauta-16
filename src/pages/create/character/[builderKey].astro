---
import { serverDB } from '@firebase/server';
import ModalPage from '@layouts/ModalPage.astro';
import {
  CHARACTER_BUILDERS_COLLECTION_NAME,
  type CharacterBuilder,
  CharacterBuilderSchema,
} from '@schemas/CharacterBuilderSchema';
import {
  CHARACTER_SHEETS_COLLECTION_NAME,
  type CharacterSheet,
  CharacterSheetSchema,
} from '@schemas/CharacterSheetSchema';
import { t } from '@utils/i18n';
import { logDebug, logError } from '@utils/logHelpers';
import { verifySession } from '@utils/server/auth/verifySession';

// Check if the user is authenticated
const session = await verifySession(Astro);

if (!session) {
  return Astro.redirect(
    `/login?redirect=${encodeURIComponent(Astro.url.pathname)}`,
  );
}

const { builderKey } = Astro.params;

if (!builderKey) {
  logError('CharacterBuilderPage', 'No builderKey provided in params');
  return Astro.redirect('/404');
}

let builder: CharacterBuilder | null = null;
let characterSheet: CharacterSheet | null = null;
let hasError = false;
let errorMessage = '';

try {
  logDebug('CharacterBuilderPage', 'Loading builder:', builderKey);

  // Fetch the character builder from Firestore
  const builderDoc = await serverDB
    .collection(CHARACTER_BUILDERS_COLLECTION_NAME)
    .doc(builderKey)
    .get();

  if (!builderDoc.exists) {
    logError('CharacterBuilderPage', 'Builder not found:', builderKey);
    return Astro.redirect('/404');
  }

  // Parse and validate the builder
  builder = CharacterBuilderSchema.parse({
    key: builderDoc.id,
    ...builderDoc.data(),
  });

  logDebug(
    'CharacterBuilderPage',
    'Builder loaded successfully:',
    builder.name,
  );

  // Load the character sheet if the builder has one specified
  if (builder.characterSheetKey) {
    try {
      logDebug(
        'CharacterBuilderPage',
        'Loading character sheet:',
        builder.characterSheetKey,
      );

      const sheetDoc = await serverDB
        .collection(CHARACTER_SHEETS_COLLECTION_NAME)
        .doc(builder.characterSheetKey)
        .get();

      if (sheetDoc.exists) {
        characterSheet = CharacterSheetSchema.parse({
          key: sheetDoc.id,
          ...sheetDoc.data(),
        });
        logDebug('CharacterBuilderPage', 'Character sheet loaded successfully');
      } else {
        logError(
          'CharacterBuilderPage',
          'Character sheet not found:',
          builder.characterSheetKey,
        );
      }
    } catch (sheetError) {
      logError(
        'CharacterBuilderPage',
        'Failed to load character sheet:',
        sheetError,
      );
      // Don't fail the entire page if sheet loading fails
    }
  }
} catch (error) {
  hasError = true;
  errorMessage = 'Failed to load character builder';
  logError('CharacterBuilderPage', 'Failed to fetch character builder:', error);
}

const title = builder
  ? `${t('app:shortname')} – ${builder.name}`
  : `${t('app:shortname')} – ${t('characters:builder.notFound.title')}`;
const description =
  builder?.description || t('characters:builder.notFound.description');
---

<ModalPage title={title} description={description}>
  <div class="content-columns">
    <article class="column-l">
      {hasError ? (
        <section class="surface p-2 error">
          <h1>{t('errors:generic.title')}</h1>
          <p>{errorMessage}</p>
          <div class="toolbar mt-2">
            <button onclick="window.location.reload()" class="button">
              {t('actions:retry')}
            </button>
            <a href="/create/character" class="button">
              {t('actions:goBack')}
            </a>
          </div>
        </section>
      ) : !builder ? (
        <section class="surface p-2">
          <h1>{t('characters:builder.notFound.title')}</h1>
          <p>{t('characters:builder.notFound.description')}</p>
          <div class="toolbar mt-2">
            <a href="/create/character" class="button">
              {t('characters:builder.actions.browse')}
            </a>
          </div>
        </section>
      ) : (
        <section>
          <header class="mb-2">
            <h1>{builder.name}</h1>
            {builder.description && (
              <p class="text-large">{builder.description}</p>
            )}
          </header>

          <div class="surface p-2 mb-2">
            <h2 class="downscaled">{t('characters:builder.stats.title')}</h2>
            <div class="grid grid-cols-3 gap-2">
              {builder.system && (
                <div>
                  <p class="text-caption">{t('characters:builder.stats.system')}</p>
                  <p class="flex items-center gap-1">
                    <cn-icon noun="game" xsmall></cn-icon>
                    {builder.system}
                  </p>
                </div>
              )}
              
              {builder.steps && (
                <div>
                  <p class="text-caption">{t('characters:builder.stats.steps')}</p>
                  <p class="flex items-center gap-1">
                    <cn-icon noun="steps" xsmall></cn-icon>
                    {builder.steps.length}
                  </p>
                </div>
              )}

              {builder.steps && (
                <div>
                  <p class="text-caption">{t('characters:builder.stats.totalFeatures')}</p>
                  <p class="flex items-center gap-1">
                    <cn-icon noun="feature" xsmall></cn-icon>
                    {builder.steps.reduce((total, step) => total + (step.features?.length || 0), 0)}
                  </p>
                </div>
              )}
            </div>
          </div>

          {characterSheet && (
            <div class="surface p-2 mb-2">
              <h2 class="downscaled">{t('characters:builder.fields.characterSheet')}</h2>
              <div class="flex items-center gap-2">
                <cn-icon noun="sheet" small></cn-icon>
                <div>
                  <p class="font-medium">{characterSheet.name || t('characters:sheet.defaultName')}</p>
                  {characterSheet.system && (
                    <p class="text-caption">{characterSheet.system}</p>
                  )}
                </div>
              </div>
            </div>
          )}

          <div class="surface p-2">
            <h2 class="downscaled">{t('characters:builder.actions.title')}</h2>
            <p class="text-small mb-2">{t('characters:builder.comingSoon')}</p>
            <div class="toolbar">
              <button class="button primary" disabled>
                {t('characters:builder.actions.startBuilding')}
              </button>
              <a href="/create/character" class="button">
                {t('characters:builder.actions.browse')}
              </a>
            </div>
          </div>
        </section>
      )}
    </article>

    <aside class="column-s">
      {builder && builder.steps && builder.steps.length > 0 && (
        <section class="surface p-2 mb-2">
          <h3 class="downscaled">{t('characters:builder.steps.title')}</h3>
          <ol class="list-none">
            {builder.steps.map((step, index) => (
              <li class="mb-1">
                <div class="flex items-start gap-2">
                  <span class="text-caption bg-surface-2 rounded-full w-6 h-6 flex items-center justify-center">
                    {index + 1}
                  </span>
                  <div>
                    <p class="text-small font-medium">{step.name}</p>
                    {step.description && (
                      <p class="text-caption">{step.description}</p>
                    )}
                    {step.features && step.features.length > 0 && (
                      <p class="text-caption">
                        {t('characters:builder.steps.featuresAvailable', { count: step.features.length })}
                      </p>
                    )}
                  </div>
                </div>
              </li>
            ))}
          </ol>
        </section>
      )}

      <section class="surface p-2">
        <h3 class="downscaled">
          <cn-icon noun="info"></cn-icon>
          {t('characters:info.title')}
        </h3>
        <p class="text-small">{t('characters:info.description')}</p>
      </section>
    </aside>
  </div>
</ModalPage>
