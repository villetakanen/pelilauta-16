---
import { serverDB } from '@firebase/server';
import Page from '@layouts/Page.astro';
import {
  CHARACTER_BUILDERS_COLLECTION_NAME,
  type CharacterBuilder,
  CharacterBuilderSchema,
} from '@schemas/CharacterBuilderSchema';
import {
  CHARACTER_SHEETS_COLLECTION_NAME,
  type CharacterSheet,
  CharacterSheetSchema,
} from '@schemas/CharacterSheetSchema';
import BackgroundPoster from '@server/ui/BackgroundPoster.astro';
import CharacterSheetArticle from '@svelte/characters/CharacterSheetArticle.svelte';
import CharacterBuilderApp from '@svelte/characters/builder/CharacterBuilderApp.svelte';
import CharacterBuilderInfoSection from '@svelte/characters/builder/CharacterBuilderInfoSection.svelte';
import { t } from '@utils/i18n';
import { logDebug, logError } from '@utils/logHelpers';
import { verifySession } from '@utils/server/auth/verifySession';

// Check if the user is authenticated
const session = await verifySession(Astro);

if (!session) {
  return Astro.redirect(
    `/login?redirect=${encodeURIComponent(Astro.url.pathname)}`,
  );
}

const { builderKey } = Astro.params;

if (!builderKey) {
  logError('CharacterBuilderPage', 'No builderKey provided in params');
  return Astro.redirect('/404');
}

let builder: CharacterBuilder | null = null;
let characterSheet: CharacterSheet | null = null;
let hasError = false;
let errorMessage = '';

try {
  logDebug('CharacterBuilderPage', 'Loading builder:', builderKey);

  // Fetch the character builder from Firestore
  const builderDoc = await serverDB
    .collection(CHARACTER_BUILDERS_COLLECTION_NAME)
    .doc(builderKey)
    .get();

  if (!builderDoc.exists) {
    logError('CharacterBuilderPage', 'Builder not found:', builderKey);
    return Astro.redirect('/404');
  }

  // Parse and validate the builder
  builder = CharacterBuilderSchema.parse({
    key: builderDoc.id,
    ...builderDoc.data(),
  });

  logDebug(
    'CharacterBuilderPage',
    'Builder loaded successfully:',
    builder.name,
  );

  // Load the character sheet if the builder has one specified
  if (builder.characterSheetKey) {
    try {
      logDebug(
        'CharacterBuilderPage',
        'Loading character sheet:',
        builder.characterSheetKey,
      );

      const sheetDoc = await serverDB
        .collection(CHARACTER_SHEETS_COLLECTION_NAME)
        .doc(builder.characterSheetKey)
        .get();

      if (sheetDoc.exists) {
        characterSheet = CharacterSheetSchema.parse({
          key: sheetDoc.id,
          ...sheetDoc.data(),
        });
        logDebug('CharacterBuilderPage', 'Character sheet loaded successfully');
      } else {
        logError(
          'CharacterBuilderPage',
          'Character sheet not found:',
          builder.characterSheetKey,
        );
      }
    } catch (sheetError) {
      logError(
        'CharacterBuilderPage',
        'Failed to load character sheet:',
        sheetError,
      );
      // Don't fail the entire page if sheet loading fails
    }
  }
} catch (error) {
  hasError = true;
  errorMessage = 'Failed to load character builder';
  logError('CharacterBuilderPage', 'Failed to fetch character builder:', error);
}

const title = builder
  ? `${t('app:shortname')} – ${builder.name}`
  : `${t('app:shortname')} – ${t('characters:builder.notFound.title')}`;
const description =
  builder?.description || t('characters:builder.notFound.description');
---

<Page title={title} description={description}>
  <CharacterBuilderApp 
    client:only="svelte"
    builder={builder}
    characterSheet={characterSheet}
  />

  <BackgroundPoster
    slot="app-background-poster"
    src="/myrrys-proprietary/juno-viinikka/juno-viinikka-dragon-2.webp"
    md="/myrrys-proprietary/juno-viinikka/juno-viinikka-dragon-2-960.webp"
  />
  <p class="text-caption text-center" style="opacity:0.44" slot="app-footer-credits">
    Taustakuva © Juno Viinikka (<a href="https://linktr.ee/junowski">https://linktr.ee/junowski</a>)
  </p>
</Page>
