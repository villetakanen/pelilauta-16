import { z } from 'zod';
import { ContentEntrySchema } from './ContentEntry';

export const PAGES_COLLECTION_NAME = 'pages';

export const PageSchema = ContentEntrySchema.extend({
  name: z.string(),
  siteKey: z.string(),
  /**
   * Legacy content field, should be handled SSR side.
   */
  content: z.string().optional(),
  category: z.string().optional(),
  revisionCount: z.coerce.number().default(0),
  previousRevisionKey: z.string().optional(),
});

export const PageRevisionSchema = z.object({
  key: z.string(),
  /**
   * The patch string generated by diff-match-patch.
   * When applied to the full markdown content of the version that *followed* this one,
   * it reconstructs the full markdown content of this_version_conceptual_id.
   */
  patch_to_reconstruct: z.string(),
  /**
   * The uid of the user that created this revision.
   */
  author: z.string(),
  /**
   * The date when this revision was created.
   */
  createdAt: z.coerce.date(),
  /**
   * Comments if any.
   */
  comments: z.string().optional(),
  previousRevisionKey: z.string().optional(),
});

export type Page = z.infer<typeof PageSchema>;
export type PageRevision = z.infer<typeof PageRevisionSchema>;

export function pageFrom(data: Partial<Page>, key = '', siteKey = ''): Page {
  return PageSchema.parse({
    ...data,
    // Overrides
    key: key || data.key || '',
    siteKey: siteKey || data.siteKey || '',
  });
}
